<?phpclass Admin_Model_CargasDevloper extends Zend_Db_Table {    protected $_name = 'cargas';    protected $_primary = 'id';    public function init() {        $viewRenderer = Zend_Controller_Action_HelperBroker::getStaticHelper('ViewRenderer');        $viewRenderer->init();        $this->view = $viewRenderer->view;    }    public function insert(array $data) {        if (!is_array($data)) {            return false;        }        $auth = Zend_Auth::getInstance();        $user = $auth->getIdentity();        if (isset($user->id) && is_numeric($user->id)) {            $data['user'] = $user->id;        } else {            unset($data['user']);        }        if (!empty($data['peso_bruto'])) {            $data['peso_bruto'] = $this->view->LimpaNumero($data['peso_bruto']);        } else {            unset($data['peso_bruto']);        }        if (!empty($data['peso_tara'])) {            $data['peso_tara'] = $this->view->LimpaNumero($data['peso_tara']);        } else {            unset($data['peso_tara']);        }        if (!empty($data['peso_nota'])) {            $data['peso_nota'] = $this->view->LimpaNumero($data['peso_nota']);        } else {            unset($data['peso_nota']);        }        if (!empty($data['percentual_quebra'])) {            $data['percentual_quebra'] = $this->view->LimpaNumero($data['percentual_quebra']);        } else {            unset($data['percentual_quebra']);        }        $data['peso_medio'] = NULL;        if (!empty($data['peso_bruto']) && !empty($data['peso_tara']) && $data['peso_bruto'] > $data['peso_tara']) {            $peso_bruto = $this->view->LimpaNumero($data['peso_bruto']);            $peso_tara = $this->view->LimpaNumero($data['peso_tara']);            $data['peso_liquido'] = ($peso_bruto - $peso_tara);            if (!empty($data['cabecas'])) {                $data['peso_medio'] = ($data['peso_liquido'] / $data['cabecas']);            }        }        if (!is_numeric($data['cabecas']) || empty($data['cabecas'])) {            unset($data['cabecas']);        }        if (!is_numeric($data['subcategoria']) || empty($data['subcategoria'])) {            unset($data['subcategoria']);        }        if (!empty($data['data_entrada'])) {            $data['data_entrada'] = $this->view->ConvercaoDate('/', $data['data_entrada'], 9);        } else {            unset($data['data_entrada']);        }        if (!empty($data['data_saida'])) {            $data['data_saida'] = $this->view->ConvercaoDate('/', $data['data_saida'], 9);        } else {            $data['data_saida'] = NULL;        }        //print_r($data);die;        if (is_numeric($data['id']) && !empty($data['id'])) {            $this->update($data, "id = " . $data['id']);//            if (!empty($data['cabecas']) && isset($data['peso_medio'])) {//                $this->EnviaEmail($data['id']);//            }            return $data['id'];        }        unset($data['id']);        $info = $this->info();        $data_insert = array_intersect_key($data, $info['metadata']);        $carga = parent::insert($data_insert);        return $carga;    }    public function backup($data) {        unset($data['id']);        $info = $this->info();        $data_insert = array_intersect_key($data, $info['metadata']);        $carga = parent::insert($data_insert);    }    public function GetRelatorioSemanal($categoria) {        $sql = $this->select()                ->setIntegrityCheck(false)                ->from(array("c" => $this->_name), array("*"))                //->joinLeft(array("u" => "usuarios"), "c.user = u.id", array("user" => "u.nome", "cpf_user" => "u.cpf"))                ->joinLeft(array("t" => "caminhoes"), "c.caminhao = t.id", array("t.placa", "t.modelo", "t.proprietario"))                ->joinLeft(array("m" => "motoristas"), "c.motorista = m.id", array("motorista" => "m.nome", "cpf_motorista" => "m.cpf"))                ->joinLeft(array("f" => "fornecedores"), "c.fornecedor = f.id", array("fornecedor" => "f.nome"))                ->joinLeft(array("cl" => "clientes"), "c.cliente = cl.id", array("cliente" => "cl.nome"))                ->joinLeft(array("cs" => "carga_categorias"), "c.categoria = cs.id", array("nome_categoria" => "cs.nome"))                ->joinLeft(array("cc" => "carga_categorias"), "cc.id = c.subcategoria", array("nome_subcategoria" => "cc.nome"))                ->where('c.categoria = ?', $categoria)                ->where('c.data_saida BETWEEN TIMESTAMP(DATE_SUB(NOW(), INTERVAL 7 day)) AND NOW()');        if ($data = $this->fetchAll($sql)) {            $result = $data->toArray();            if (!empty($result['data_entrada'])) {                $result['data_entrada'] = $this->view->ConvercaoDate('-', $result['data_entrada'], '10');            }            if (!empty($result['data_saida'])) {                $result['data_saida'] = $this->view->ConvercaoDate('-', $result['data_saida'], '10');            }            return $result;        } else {            return FALSE;        }    }//    public function EnviaEmail($param) {//        $auth = Zend_Auth::getInstance();//        $user = $auth->getIdentity();////        $ModelUsuarios = new Admin_Model_Usuarios();////        /* Listo todos os usuarios ativos *///        $listaUsuarios = $ModelUsuarios->GetUsuarios();////        if (isset($user->id) && is_numeric($user->id) && $param) {////            $dados = $this->GetTicket($param);//            if ($dados['envia_email'] == '0') {//                foreach ($listaUsuarios as $user) {//                    if (!empty($user['email'])) {//                        $conteudo = array('nome' => $user['nome'],//                            'placa' => $dados['placa'],//                            'modelo' => $dados['modelo'],//                            'proprietario' => $dados['proprietario'],//                            'fornecedor' => $dados['fornecedor'],//                            'motorista' => $dados['motorista'],//                            'cpf_motorista' => $dados['cpf_motorista'],//                            'user' => $dados['user'],//                            'cpf_user' => $dados['cpf_user'],//                            'descricao' => $dados['descricao'],//                            'nota_fiscal' => $dados['nota_fiscal'],//                            'percentual_quebra' => $dados['percentual_quebra'],//                            'cliente' => $dados['cliente'],//                            'carga' => $dados['id'],//                            'cabecas' => $dados['cabecas'],//                            'peso_tara' => $dados['peso_tara'],//                            'peso_bruto' => $dados['peso_bruto'],//                            'peso_liquido' => $dados['peso_liquido'],//                            'peso_medio' => $dados['peso_medio'],//                            'data_entrada' => $dados['data_entrada'],//                            'data_saida' => $dados['data_saida'],//                            'nome_categoria' => $dados['nome_categoria'],//                            'nome_subcategoria' => $dados['nome_subcategoria']//                        );//////                        $assunto = "SysControl | Nova Carga do CaminhÃ£o: " . $dados['placa'];//                        Zend_Controller_Action_HelperBroker::getStaticHelper('Emails')->Emails('', trim($user['email']), $assunto, $conteudo, false, 'emails/ticket.phtml');//                    }//                }////                $this->update(array('envia_email' => '1'), "id = " . $dados['id']);//            }//        }//    }    public function Dados() {        $sql = $this->select();        if ($result = $this->fetchRow($sql)) {            return $result;        }    }    public function GetPendente($caminhao = FALSE) {        $sql = $this->select()                ->setIntegrityCheck(false)                ->from(array("c" => $this->_name))                ->where('c.caminhao = ?', $caminhao)                ->where("c.peso_liquido IS NULL")                //->where("date_add(c.data_entrada, interval 4 DAY) < now()")                //->where("c.peso_liquido <='0'")                //->orWhere("peso_liquido IS NULL")                ->where("excluido =?", 0)                ->order('c.id DESC');        if ($result = $this->fetchRow($sql)) {            return $result->toArray();        } else {            return FALSE;        }    }    public function GetNotifica() {        $sql = $this->select()                ->setIntegrityCheck(false)                ->from(array("c" => $this->_name))                ->joinLeft(array("t" => "caminhoes"), "c.caminhao = t.id", array("t.placa", "t.modelo", "t.proprietario"))                ->joinLeft(array("m" => "motoristas"), "c.motorista = m.id", array("motorista" => "m.nome", "cpf_motorista" => "m.cpf"))                ->joinLeft(array("f" => "fornecedores"), "c.fornecedor = f.id", array("fornecedor" => "f.nome"))                ->joinLeft(array("cl" => "clientes"), "c.cliente = cl.id", array("cliente" => "cl.nome"))                ->joinLeft(array("cc" => "carga_categorias"), "cc.id = c.subcategoria", array("nome_subcategoria" => "cc.nome"))                ->where("c.peso_liquido IS NOT NULL")                ->where("c.categoria = ?", 1)                ->where("c.envia_email = ?", 0)                ->where("c.excluido = ?", 0)                ->order('c.data_saida ASC');        if ($result = $this->fetchRow($sql)) {            return $result->toArray();        } else {            return FALSE;        }    }    public function VerificaNota($caminhao = FALSE, $nota = FALSE) {        $sql = $this->select()                ->setIntegrityCheck(false)                ->from(array("c" => $this->_name))                //->joinLeft(array("t" => "caminhoes"), "c.caminhao = t.id", array("t.placa", "t.modelo", "t.proprietario"))                ->where('c.excluido =0');        if ($caminhao) {            $sql->where('c.caminhao = ?', $caminhao);        }        if ($nota) {            $sql->where('c.nota_fiscal = ?', $nota);        }        if ($result = $this->fetchRow($sql)) {            return true;        } else {            return false;        }    }    public function VerificaCarga($veiculo) {        $select = $this->select();        $select->from($this->_name, array('*'))                ->where("peso_liquido <=0 OR peso_liquido IS NULL")                ->where("excluido = 0")                ->where("caminhao =?", $veiculo);        if ($cargas = $this->fetchRow($select)) {            return $cargas->toArray();        } else {            return FALSE;        }    }    public function Getcargas($veiculo) {        $select = $this->select();        $select->from($this->_name, array('*'))                ->where("excluido = 0")                ->where("caminhao = ?", $veiculo)                ->order("id DESC");        if ($cargas = $this->fetchAll($select)) {            return $cargas->toArray();        } else {            return FALSE;        }    }    public function ListaPendentes($veiculo) {        $select = $this->select();        $select->from($this->_name, array('*'))                ->where("peso_liquido <=0 OR peso_liquido IS NULL")                ->where("excluido =?", 0)                ->where("caminhao =?", $veiculo);        if ($cargas = $this->fetchAll($select)) {            return $cargas->toArray();        } else {            return FALSE;        }    }    public function VerificaCargas() {        $select = $this->select();        $select->from($this->_name, array('count(*) as total'))                ->where("peso_liquido <=?", 0)                ->orWhere("peso_liquido IS NULL")                ->where("excluido =?", 0);        $rows = $this->fetchAll($select);        return($rows[0]->total);    }    public function ListarCargas() {        $sql = $this->select()                ->where("ativo = 1");        if ($categorias = $this->fetchAll($sql)) {            return $categorias->toArray();        } else {            return FALSE;        }    }    public function GetDados($id) {        $sql = $this->select()                ->where("id = ?", $id);        if ($data = $this->fetchRow($sql)) {        	            $result = $data->toArray();                        if (!empty($result['peso_tara'])) {                $result['peso_tara'] = $this->view->LimpaNumero($result['peso_tara']);            }            if (!empty($result['peso_bruto'])) {                $result['peso_bruto'] = $this->view->LimpaNumero($result['peso_bruto']);            }            if (!empty($result['peso_liquido'])) {                $result['peso_liquido'] = $this->view->LimpaNumero($result['peso_liquido']);            }            if (!empty($result['data_entrada'])) {                $result['data_entrada'] = $this->view->ConvercaoDate('-', $result['data_entrada'], '10');            }            if (!empty($result['data_saida']) && $result['data_saida'] != '0000-00-00 00:00:00') {                $result['data_saida'] = $this->view->ConvercaoDate('-', $result['data_saida'], '10');            } else {                $result['data_saida'] = '';            }            return $result;        }    }    public function update(array $data, $where) {        $info = $this->info();        $data_insert = array_intersect_key($data, $info['metadata']);        parent::update($data_insert, $where);    }    public function Lista($pendentes = FALSE, $data = FALSE, $categoria = FALSE, $ativo = FALSE) {        $sql = $this->select()                ->setIntegrityCheck(false)                ->from(array("c" => $this->_name))                ->joinLeft(array("t" => "caminhoes"), "c.caminhao = t.id", array("t.placa", "t.modelo", "t.proprietario"))                ->joinLeft(array("m" => "motoristas"), "c.motorista = m.id", array("motorista" => "m.nome", "cpf_motorista" => "m.cpf"))                ->joinLeft(array("f" => "fornecedores"), "c.fornecedor = f.id", array("fornecedor" => "f.nome"))                ->joinLeft(array("cl" => "clientes"), "c.cliente = cl.id", array("cliente" => "cl.nome"))                ->joinLeft(array("cs" => "carga_categorias"), "c.categoria = cs.id", array("nome_categoria" => "cs.nome"))                //->joinLeft(array("cc" => "carga_categorias"), "cs.pai = cc.id", array("nome_subcategoria" => "cc.nome"))                ->group("c.id")                ->order("c.id Asc");        if ($pendentes) {            $sql->where("c.peso_liquido <='0'")                    ->orWhere("c.peso_liquido IS NULL");        } else {            $sql->where("c.peso_liquido >'0'");        }        if ($data) {            $sql->where("MONTH(c.data_entrada) = ?", $data['mes'])                    ->where("YEAR(c.data_entrada) = ?", $data['ano'])                    ->order("DAY(c.data_entrada) DESC");        }        if ($categoria) {            $sql->where('c.categoria =?', $categoria);        }        $sql->where('c.excluido = 0');        if ($result = $this->fetchAll($sql)) {            return $result->toArray();        }    }    public function GetDadosCarga($carga) {        $sql = $this->select()                ->setIntegrityCheck(false)                ->from(array("c" => $this->_name))                ->joinLeft(array("t" => "caminhoes"), "c.caminhao = t.id", array("t.placa", "t.modelo", "t.proprietario"))                ->joinLeft(array("m" => "motoristas"), "c.motorista = m.id", array("motorista" => "m.nome", "cpf_motorista" => "m.cpf"))                ->joinLeft(array("f" => "fornecedores"), "c.fornecedor = f.id", array("fornecedor" => "f.nome"))                ->joinLeft(array("cl" => "clientes"), "c.cliente = cl.id", array("cliente" => "cl.nome"))                ->joinLeft(array("cc" => "carga_categorias"), "cc.id = c.subcategoria", array("nome_subcategoria" => "cc.nome"))                ->where("c.id = ?", $carga)                ->where("c.excluido = 0");        if ($result = $this->fetchRow($sql)) {            return $result->toArray();        }    }    public function GetCargaMotorista($motorista) {        $sql = $this->select()                ->setIntegrityCheck(false)                ->from(array("c" => $this->_name))                ->where("c.motorista = ?", $motorista)                ->where("c.excluido = 0");        if ($result = $this->fetchAll($sql)) {            return $result->toArray();        }    }    public function VerificaCategoria($categoria) {        $sql = $this->select()                ->setIntegrityCheck(false)                ->from(array('c' => $this->_name), array("*"))                ->where("c.categoria = ?", $categoria);        if ($result = $this->fetchRow($sql)) {            return $result->toArray();        } else {            return false;        }    }    public function VerificaSubcategoria($categoria) {        $sql = $this->select()                ->setIntegrityCheck(false)                ->from(array('c' => $this->_name), array("*"))                ->where("c.subcategoria = ?", $categoria);        if ($result = $this->fetchRow($sql)) {            return $result->toArray();        } else {            return false;        }    }    public function VerificaCaminhao($caminhao) {        $sql = $this->select()                ->setIntegrityCheck(false)                ->from(array('c' => $this->_name), array("*"))                ->where("c.caminhao = ?", $caminhao);        if ($result = $this->fetchRow($sql)) {            return $result->toArray();        } else {            return false;        }    }    public function GetTicket($id) {        $sql = $this->select()                ->setIntegrityCheck(false)                ->from(array("c" => $this->_name), array("*"))                ->joinLeft(array("u" => "usuarios"), "c.user = u.id", array("user" => "u.nome", "cpf_user" => "u.cpf"))                ->joinLeft(array("t" => "caminhoes"), "c.caminhao = t.id", array("t.placa", "t.modelo", "t.proprietario"))                ->joinLeft(array("m" => "motoristas"), "c.motorista = m.id", array("motorista" => "m.nome", "cpf_motorista" => "m.cpf"))                ->joinLeft(array("f" => "fornecedores"), "c.fornecedor = f.id", array("fornecedor" => "f.nome"))                ->joinLeft(array("cl" => "clientes"), "c.cliente = cl.id", array("cliente" => "cl.nome"))                ->joinLeft(array("cs" => "carga_categorias"), "c.categoria = cs.id", array("nome_categoria" => "cs.nome"))                ->joinLeft(array("cc" => "carga_categorias"), "cc.id = c.subcategoria", array("nome_subcategoria" => "cc.nome"))                ->where("c.id = ?", $id);        if ($data = $this->fetchRow($sql)) {            $result = $data->toArray();            if (!empty($result['data_entrada'])) {                $result['data_entrada'] = $this->view->ConvercaoDate('-', $result['data_entrada'], '10');            }            if (!empty($result['data_saida'])) {                $result['data_saida'] = $this->view->ConvercaoDate('-', $result['data_saida'], '10');            }            return $result;        }    }    public function geraGraficoSemana() {        $db = Zend_Registry::get("db");        $select = "SELECT c.categoria, SUM(c.peso_medio) AS total_peso_medio, COUNT(c.categoria) AS total_categoria, cc.nome as nome_categoriaFROM cargas AS c INNER JOIN carga_categorias AS cc ON c.subcategoria  = cc.idand date(c.data_entrada) = date(now())WHERE (c.categoria = 1) AND (c.data_saida BETWEEN TIMESTAMP(DATE_SUB(NOW(), INTERVAL 7 day)) AND NOW()) GROUP BY c.subcategoria";        $result = $db->query($select);        return $result->fetchAll();    }    public function geraGraficoDia() {        $db = Zend_Registry::get("db");        $select = "SELECT c.categoria, COUNT(c.categoria) AS total_categoria, cc.nome as nome_categoria FROM cargas AS c INNER JOIN carga_categorias AS cc ON c.categoria  = cc.id and date(c.data_entrada) = date(now()) GROUP BY c.categoria";        $result = $db->query($select);        return $result->fetchAll();    }    public function geraGraficoMes() {        $db = Zend_Registry::get("db");        $select = "SELECT c.categoria, COUNT(c.categoria) AS total_categoria, cc.nome as nome_categoria FROM cargas AS c INNER JOIN carga_categorias AS cc ON c.categoria  = cc.id and MONTH(c.data_entrada) = MONTH(now()) and YEAR(c.data_entrada) = YEAR(now()) GROUP BY c.categoria";        $result = $db->query($select);        $cargas = $result->fetchAll();        return $cargas;    }    public function geraGraficoPesoLiquido($largura, $altura) {        $db = Zend_Registry::get("db");        $select = "SELECT sum(c.peso_liquido) as total_peso, cc.nome astipo FROM cargas AS cINNER JOIN carga_categorias AS cc ON c.subcategoria  = cc.idWHERE (c.categoria = 1) AND (c.data_saidaBETWEEN TIMESTAMP(DATE_SUB(NOW(), INTERVAL 7 day)) AND NOW()) GROUP BY c.subcategoria";        $result = $db->query($select);        $cargas = $result->fetchAll();        $referencias = '';        $total = '';        $indices = '';        foreach ($cargas as $key => $row) {            if ($key == 0) {                $referencias .= $row['tipo'];                $total .= number_format($row['total_peso'], 2, ',', '.');                $indices .= number_format($row['total_peso'], 2, ',', '.');            }            if ($key > 0) {                $referencias .= '|' . $row['tipo'];                $total .= ',' . number_format($row['total_peso'], 2, ',', '.');                $indices .= '|' . number_format($row['total_peso'], 2, ',', '.');            }        }        return "http://chart.apis.google.com/chart?cht=p3&chd=t:" . $total . "&chs=" . $largura . "x" . $altura . "&chdl=" . $referencias . "&chl=" . $indices;    }    public function geraGraficoTotal($largura, $altura) {        $db = Zend_Registry::get("db");        $select = "SELECT  COUNT(c.categoria) AS total_tipo, cc.nome as tipo FROM cargas AS cINNER JOIN carga_categorias AS cc ON c.subcategoria  = cc.idWHERE (c.categoria = 1) AND (c.data_saidaBETWEEN TIMESTAMP(DATE_SUB(NOW(), INTERVAL 7 day)) AND NOW()) GROUP BY c.subcategoria";        $result = $db->query($select);        $cargas = $result->fetchAll();        $referencias = '';        $total = '';        $indices = '';        foreach ($cargas as $key => $row) {            if ($key == 0) {                $referencias .= $row['tipo'];                $total .= $row['total_tipo'];                $indices .= $row['total_tipo'];            }            if ($key > 0) {                $referencias .= '|' . $row['tipo'];                $total .= ',' . $row['total_tipo'];                $indices .= '|' . $row['total_tipo'];            }        }        return "http://chart.apis.google.com/chart?cht=p3&chd=t:" . $total . "&chs=" . $largura . "x" . $altura . "&chdl=" . $referencias . "&chl=" . $indices;    }    public function geraGraficoPesoMedio($largura, $altura) {        $db = Zend_Registry::get("db");        $select = "SELECT c.categoria, COUNT(c.categoria) AS total_tipo, (sum(c.peso_medio)) as total_peso_medio, cc.nome astipo FROM cargas AS cINNER JOIN carga_categorias AS cc ON c.subcategoria  = cc.idWHERE (c.categoria = 1) AND (c.data_saidaBETWEEN TIMESTAMP(DATE_SUB(NOW(), INTERVAL 7 day)) AND NOW()) GROUP BY c.subcategoria";        $result = $db->query($select);        $cargas = $result->fetchAll();        $referencias = '';        $total = '';        $indices = '';        foreach ($cargas as $key => $row) {            if ($key == 0) {                $referencias .= $row['tipo'];                $total .= number_format(($row['total_peso_medio'] / $row['total_tipo']), 2, ',', '.');                $indices .= number_format(($row['total_peso_medio'] / $row['total_tipo']), 2, ',', '.');            }            if ($key > 0) {                $referencias .= '|' . $row['tipo'];                $total .= ',' . number_format(($row['total_peso_medio'] / $row['total_tipo']), 2, ',', '.');                $indices .= '|' . number_format(($row['total_peso_medio'] / $row['total_tipo']), 2, ',', '.');            }        }        return "http://chart.apis.google.com/chart?cht=p3&chd=t:" . $total . "&chs=" . $largura . "x" . $altura . "&chdl=" . $referencias . "&chl=" . $indices;    }}