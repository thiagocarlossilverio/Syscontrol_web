<?phpclass Admin_Model_Viagens extends Zend_Db_Table {    protected $_name = 'viagens';    protected $_primary = 'id';    public function init() {        $viewRenderer = Zend_Controller_Action_HelperBroker::getStaticHelper('ViewRenderer');        $viewRenderer->init();        $this->view = $viewRenderer->view;    }    public function insert(array $data) {        if (!is_array($data)) {            return false;        }        $auth = Zend_Auth::getInstance();        $user = $auth->getIdentity();        if (isset($user->id) && is_numeric($user->id)) {            $data['user'] = $user->id;        } else {            unset($data['user']);        }        if (!empty($data['peso_bruto'])) {            $data['peso_bruto'] = $this->view->LimpaNumero($data['peso_bruto']);        } else {            unset($data['peso_bruto']);        }        if (!empty($data['motorista']) && !is_numeric($data['motorista'])) {            $data['motorista'] = preg_replace("/[^0-9]/", "", $data['motorista']);        }        if (!empty($data['peso_nota'])) {            $data['peso_nota'] = $this->view->LimpaNumero($data['peso_nota']);        } else {            unset($data['peso_nota']);        }        if (!empty($data['peso_tara'])) {            $data['peso_tara'] = $this->view->LimpaNumero($data['peso_tara']);        } else {            unset($data['peso_tara']);        }        if (!empty($data['km_inicial'])) {            $data['km_inicial'] = $this->view->LimpaNumero($data['km_inicial']);        } else {            unset($data['km_inicial']);        }        if (!empty($data['km_final'])) {            $data['km_final'] = $this->view->LimpaNumero($data['km_final']);        } else {            unset($data['km_final']);        }        if (!is_numeric($data['quantidade']) || empty($data['quantidade'])) {            unset($data['quantidade']);        }        if (!empty($data['data_abertura'])) {            //$data['data_abertura'] = $this->view->ConvercaoDate('/', $data['data_abertura'], 9);        } else {            unset($data['data_abertura']);        }        if (!empty($data['data_fechamento'])) {            //$data['data_fechamento'] = $this->view->ConvercaoDate('/', $data['data_fechamento'], 9);        } else {            $data['data_fechamento'] = NULL;        }        if (!empty($data['data_fechamento_final'])) {            // $data['data_fechamento_final'] = $this->view->ConvercaoDate('/', $data['data_fechamento_final'], 9);        } else {            $data['data_fechamento_final'] = NULL;        }        // Path ao arquivo de configuração        $filename = APPLICATION_PATH . '/configs/version_app.ini';        // Carrega o arquivo de configuração        $conf_versao_app = new Zend_Config_Ini($filename, "producao", TRUE);        $configuracao = $conf_versao_app->toArray();        $data['version_atual_app'] = $configuracao['version_atual_app'];        if (is_numeric($data['id']) && !empty($data['id'])) {            $this->update($data, "id = " . $data['id']);            return $data['id'];        }        unset($data['id']);        $info = $this->info();        $data_insert = array_intersect_key($data, $info['metadata']);        $id_viagem = parent::insert($data_insert);        return $id_viagem;    }    public function backup($data) {        unset($data['id']);        $info = $this->info();        $data_insert = array_intersect_key($data, $info['metadata']);        $carga = parent::insert($data_insert);    }        public function GetTicket($id) {        $sql = $this->select()                ->setIntegrityCheck(false)                ->from(array("v" => $this->_name), array("*"))                ->joinLeft(array("c" => "caminhoes"), "v.veiculo = c.id", array("c.placa", "c.modelo", "c.proprietario", "c.proprio"))                ->joinLeft(array("m" => "motoristas"), "v.motorista = m.id", array("motorista" => "m.nome", "cpf_motorista" => "m.cpf"))                ->joinLeft(array("o" => "fornecedores"), "v.origem_carregamento = o.id", array("fornecedor" => "o.nome"))                ->joinLeft(array("d" => "clientes"), "v.destino_carregamento = d.id", array("cliente" => "d.nome"))                ->joinLeft(array("cs" => "carga_categorias"), "v.categoria = cs.id", array("nome_categoria" => "cs.nome"))                ->joinLeft(array("cc" => "carga_categorias"), "cc.id = v.subcategoria", array("nome_subcategoria" => "cc.nome"))                ->where("v.id = ?", $id);        if ($data = $this->fetchRow($sql)) {            $result = $data->toArray();            if (!empty($result['data_abertura'])) {                $result['data_abertura'] = $this->view->ConvercaoDate('-', $result['data_abertura'], '10');            }            if (!empty($result['data_fechamento'])) {                $result['data_fechamento'] = $this->view->ConvercaoDate('-', $result['data_fechamento'], '10');            }            return $result;        }    }    public function GetSubCategoriaSemana() {        $sql = $this->select()                ->setIntegrityCheck(false)                ->from(array("v" => $this->_name), array('v.subcategoria'))                ->joinLeft(array("cc" => "carga_categorias"), "cc.id = v.subcategoria", array("nome_subcategoria" => "cc.nome"))                ->where("v.excluido = '0'")                ->where('v.data_fechamento BETWEEN TIMESTAMP(DATE_SUB(NOW(), INTERVAL 7 day)) AND NOW()')                ->distinct('v.subcategoria')                ->group('v.subcategoria');        if ($data = $this->fetchAll($sql)) {            return $data->toArray();        } else {            return FALSE;        }    }    public function GetRelatorioSemanal($subcategoria = false) {        $sql = $this->select()                ->setIntegrityCheck(false)                ->from(array("v" => $this->_name), array("*"))                ->joinLeft(array("t" => "caminhoes"), "v.veiculo = t.id", array("t.placa", "t.modelo", "t.proprietario"))                ->joinLeft(array("m" => "motoristas"), "v.motorista = m.id", array("motorista" => "m.nome", "cpf_motorista" => "m.cpf"))                ->joinLeft(array("f" => "fornecedores"), "v.origem_carregamento = f.id", array("nome_origem_carregamento" => "f.nome"))                ->joinLeft(array("c" => "clientes"), "v.destino_carregamento = c.id", array("nome_destino_carregamento" => "c.nome"))                ->joinLeft(array("cs" => "carga_categorias"), "v.categoria = cs.id", array("nome_categoria" => "cs.nome"))                ->joinLeft(array("cc" => "carga_categorias"), "cc.id = v.subcategoria", array("nome_subcategoria" => "cc.nome"))                ->where('v.subcategoria = ?', $subcategoria)                ->where("v.excluido = '0'")                ->where('v.data_fechamento BETWEEN TIMESTAMP(DATE_SUB(NOW(), INTERVAL 7 day)) AND NOW()')                ->group('v.id');        if ($data = $this->fetchAll($sql)) {            return $data->toArray();        } else {            return FALSE;        }    }    public function Dados() {        $sql = $this->select();        if ($result = $this->fetchRow($sql)) {            return $result;        }    }    public function GetCoordenadas($id) {        $sql = $this->select()                ->setIntegrityCheck(false)                ->from(array("v" => $this->_name), array("id", "origem", "destino_final", "coordenadas_abertura", "coordenadas_fechamento"))                ->where('id = ?', $id);        if ($result = $this->fetchRow($sql)) {            return $result->toArray();        }    }    public function GetPendente($caminhao = FALSE) {        $sql = $this->select()                ->setIntegrityCheck(false)                ->from(array("v" => $this->_name))                ->where('v.veiculo = ?', $caminhao)                ->where("v.km_final IS NULL")                ->where("v.status =?", 0)                ->order('v.id DESC');        if ($result = $this->fetchRow($sql)) {            return $result->toArray();        } else {            return FALSE;        }    }    public function update(array $data, $where) {        $info = $this->info();        $data_insert = array_intersect_key($data, $info['metadata']);        parent::update($data_insert, $where);    }    public function Lista($veiculo = FALSE, $motorista = FALSE, $categoria = FALSE, $subcategoria = FALSE, $data_inicio = false, $data_fim = false) {        $sql = $this->select()                ->setIntegrityCheck(false)                ->from(array("v" => $this->_name), array("*"))                ->joinLeft(array("t" => "caminhoes"), "v.veiculo = t.id", array("t.placa", "t.modelo", "t.proprietario"))                ->joinLeft(array("m" => "motoristas"), "v.motorista = m.id", array("motorista" => "m.nome", "cpf_motorista" => "m.cpf"))                ->joinLeft(array("cs" => "carga_categorias"), "v.categoria = cs.id", array("nome_categoria" => "cs.nome"))                ->joinLeft(array("cc" => "carga_categorias"), "cc.id = v.subcategoria", array("nome_subcategoria" => "cc.nome"))                ->joinLeft(array("f" => "fornecedores"), "f.id = v.origem_carregamento", array("nome_origem" => "f.nome"))                ->joinLeft(array("c" => "clientes"), "c.id = v.destino_carregamento", array("nome_cliente" => "c.nome"));        if ($veiculo) {            $sql->where('v.veiculo =?', $veiculo);        }        if ($motorista) {            $sql->where('v.motorista =?', $motorista);        }        if ($categoria) {            $sql->where('v.categoria =?', $categoria);        }        if ($subcategoria) {            $sql->where('v.subcategoria =?', $subcategoria);        }                        if ($data_inicio && $data_fim) {            $sql->where("DATE(v.data_abertura) BETWEEN '$data_inicio' AND '$data_fim' OR DATE(v.data_fechamento) BETWEEN '$data_inicio' AND '$data_fim'");        } else {            $inicio_mes = mktime(0, 0, 0, date('m'), 1, date('Y'));            $data_inicio = date('Y-m-d', $inicio_mes);            $data_fim = date('Y-m-d');            $sql->where("DATE(v.data_abertura) BETWEEN '$data_inicio' AND '$data_fim' OR DATE(v.data_fechamento) BETWEEN '$data_inicio' AND '$data_fim'");        }        $sql->where('v.status > ?', 0)                ->where("v.excluido = ?", 0)                ->group("v.id")                ->order("v.id DESC");        if ($result = $this->fetchAll($sql)) {            return $result->toArray();        }    }    public function ViewViagem($param) {        $sql = $this->select()                ->setIntegrityCheck(false)                ->from(array("v" => $this->_name), array("*"))                ->joinLeft(array("t" => "caminhoes"), "v.veiculo = t.id", array("t.placa", "t.modelo", "t.proprietario"))                ->joinLeft(array("f" => "fornecedores"), "v.origem_carregamento = f.id", array("nome_origem_carregamento" => "f.nome"))                ->joinLeft(array("c" => "clientes"), "v.destino_carregamento = c.id", array("nome_destino_carregamento" => "c.nome"))                ->joinLeft(array("m" => "motoristas"), "v.motorista = m.id", array("nome_motorista" => "m.nome", "cpf_motorista" => "m.cpf"))                ->joinLeft(array("cs" => "carga_categorias"), "v.categoria = cs.id", array("nome_categoria" => "cs.nome"))                ->joinLeft(array("cc" => "carga_categorias"), "cc.id = v.subcategoria", array("nome_subcategoria" => "cc.nome"))                ->where("v.id = ?", $param)                ->group("v.id")                ->order("v.id DESC");        if ($result = $this->fetchRow($sql)) {            return $result->toArray();        }    }    public function GetViagensMotorista($motorista, $limit = false) {        $sql = $this->select()                ->setIntegrityCheck(false)                ->from(array("v" => $this->_name))                ->where("v.motorista = ?", $motorista)                ->where("v.km_final IS NOT NULL")                ->where("v.peso_tara IS NOT NULL")                ->where("v.peso_bruto IS NOT NULL")                ->where("v.excluido = 0");        if ($limit) {            $sql->limit($limit);        }        $sql->order("v.id DESC");        if ($result = $this->fetchAll($sql)) {            return $result->toArray();        }    }    public function GetNotifica() {        $sql = $this->select()                ->setIntegrityCheck(false)                ->from(array("v" => $this->_name), array("*"))                ->joinLeft(array("t" => "caminhoes"), "v.veiculo = t.id", array("t.placa", "t.modelo", "t.proprietario"))                ->joinLeft(array("m" => "motoristas"), "v.motorista = m.id", array("motorista" => "m.nome", "cpf_motorista" => "m.cpf"))                ->joinLeft(array("cs" => "carga_categorias"), "v.categoria = cs.id", array("nome_categoria" => "cs.nome"))                ->joinLeft(array("cc" => "carga_categorias"), "cc.id = v.subcategoria", array("nome_subcategoria" => "cc.nome"))                ->joinLeft(array("f" => "fornecedores"), "v.origem_carregamento = f.id", array("nome_origem_carregamento" => "f.nome"))                ->joinLeft(array("c" => "clientes"), "v.destino_carregamento = c.id", array("nome_destino_carregamento" => "c.nome"))                //->where("v.km_final IS NOT NULL")                ->where("v.peso_tara IS NOT NULL")                ->where("v.peso_bruto IS NOT NULL")                ->where("v.notificado = ?", 0)                ->where("v.excluido = ?", 0)                ->group("v.id")                ->order('v.data_fechamento ASC');        if ($result = $this->fetchAll($sql)) {            return $result->toArray();        } else {            return FALSE;        }    }    public function GetViagem($id_viagem) {        $sql = $this->select()                ->setIntegrityCheck(false)                ->from(array("v" => $this->_name), array("*"))                ->joinLeft(array("t" => "caminhoes"), "v.veiculo = t.id", array("t.placa", "t.modelo", "t.proprietario"))                ->joinLeft(array("m" => "motoristas"), "v.motorista = m.id", array("motorista" => "m.nome", "cpf_motorista" => "m.cpf"))                ->joinLeft(array("cs" => "carga_categorias"), "v.categoria = cs.id", array("nome_categoria" => "cs.nome"))                ->joinLeft(array("cc" => "carga_categorias"), "cc.id = v.subcategoria", array("nome_subcategoria" => "cc.nome"))                ->joinLeft(array("f" => "fornecedores"), "v.origem_carregamento = f.id", array("nome_origem_carregamento" => "f.nome"))                ->joinLeft(array("c" => "clientes"), "v.destino_carregamento = c.id", array("nome_destino_carregamento" => "c.nome"))                ->where("v.id = ?", $id_viagem);        if ($result = $this->fetchRow($sql)) {            return $result->toArray();        } else {            return FALSE;        }    }    public function geraGraficoDia() {        $db = Zend_Registry::get("db");        $select = "SELECT v.subcategoria, COUNT(v.subcategoria) AS total_categoria, cc.nome as nome_categoria FROM viagens AS v INNER JOIN carga_categorias AS cc ON v.subcategoria  = cc.id  WHERE v.excluido =0 and date(v.data_abertura) = date(NOW())GROUP BY v.subcategoria";        $result = $db->query($select);        return $result->fetchAll();    }    public function geraGraficoMes() {        $db = Zend_Registry::get("db");        $select = "SELECT v.subcategoria, COUNT(v.subcategoria) AS total_categoria, cc.nome as nome_categoria FROM viagens AS v INNER JOIN carga_categorias AS cc ON v.subcategoria  = cc.id WHERE v.excluido =0 and MONTH(v.data_abertura) = MONTH(now()) and YEAR(v.data_abertura) = YEAR(now()) GROUP BY v.subcategoria";        $result = $db->query($select);        $cargas = $result->fetchAll();        return $cargas;    }}