<?phpclass Admin_Model_Abastecimentos extends Zend_Db_Table {    protected $_name = 'abastecimentos';    protected $_primary = 'id';    public function init() {        $viewRenderer = Zend_Controller_Action_HelperBroker::getStaticHelper('ViewRenderer');        $viewRenderer->init();        $this->view = $viewRenderer->view;    }    public function insert(array $data) {        if (!is_array($data)) {            return false;        }        /*  if (!empty($data['data_envio'])) {          $data['data_envio'] = $this->view->ConvercaoDate('/', $data['data_envio'], 9);          } */        if (!empty($data['km'])) {            $data['km'] = $this->view->LimpaNumero($data['km']);        }        if (!empty($data['litros'])) {            $data['litros'] = $this->view->LimpaNumero($data['litros']);        }        if (empty($data['registro'])) {            unset($data['registro']);        }        $info = $this->info();        $data_insert = array_intersect_key($data, $info['metadata']);        $result = parent::insert($data_insert);        return $result;    }    public function GetAbastecida($id) {        $sql = $this->select()                ->setIntegrityCheck(false)                ->from(array('a' => $this->_name), array("*"))                ->where("a.id = ?", $id);        if ($result = $this->fetchRow($sql)) {            $result = $result->toArray();            if (!empty($result['data_envio'])) {                $result['data_envio'] = $this->view->ConvercaoDate('-', $result['data_envio'], '10');            }            return $result;        } else {            return false;        }    }    public function ListarVeiculos() {        $sql = $this->select()                ->setIntegrityCheck(false)                ->from(array('a' => $this->_name), array("*"))                ->joinLeft(array("c" => "caminhoes"), "c.id = a.veiculo", array("id_veiculo" => "c.id", "modelo_veiculo" => "c.modelo", "c.placa"))                //->joinLeft(array("m" => "motoristas"), "m.id = a.motorista", array("nome_motorista" => "m.nome"))                ->where("c.ativo = ?", 1)                ->group("c.id")                ->order("c.modelo");        if ($list = $this->fetchAll($sql)) {            return $list->toArray();        } else {            return FALSE;        }    }    public function GraficoMediaVeiculos($inicio = false, $fim = false) {        $sql = $this->select()                ->setIntegrityCheck(false)                ->from(array('a' => $this->_name), array("*"))                ->joinLeft(array("c" => "caminhoes"), "c.id = a.veiculo", array("id_veiculo" => "c.id", "modelo_veiculo" => "c.modelo", "c.placa"))                ->where("c.ativo = ?", 1)                ->group("c.id")                //  ->limit(30)                ->order("c.modelo");        if ($list = $this->fetchAll($sql)) {            $resultado = $list->toArray();            $dados = array();            //percorre o loop preenchendo o array            foreach ($resultado as $row) {                $dados_media = $this->GetMedia($row['id_veiculo'], $inicio, $fim);                if (!is_null($dados_media['media_consumo'])) {                    //cria um array auxiliar para que a cada linha ele comece um novo, pois eh varios array dentro de um array                    $array = array();                    $veiculo = utf8_decode($row['placa']);                    array_push($array, $veiculo, $dados_media['media_consumo']);                    //add o array novo dentro do array unico criado antes do loop                    array_push($dados, $array);                }            }            return $dados;        } else {            return FALSE;        }    }    public function GetViagensMedia($veiculo, $data_inicio = false, $data_fim = false) {        $sql = $this->select()                ->setIntegrityCheck(false)                ->from(array('a' => $this->_name), array("*"))                ->joinLeft(array("c" => "caminhoes"), "c.id = a.veiculo", array("modelo_veiculo" => "c.modelo", "c.placa"))                ->joinLeft(array("m" => "motoristas"), "m.id = a.motorista", array("nome_motorista" => "m.nome"))                ->joinLeft(array("f" => "fornecedores_combustivel"), "f.id = a.fornecedor", array("nome_fornecedor" => "f.nome"))                ->where("a.veiculo = ?", $veiculo)                ->where("a.excluido IS NULL");        if ($data_inicio && $data_fim) {            $sql->where("DATE(a.data_envio) BETWEEN '$data_inicio' AND '$data_fim'");        } else {            $inicio_mes = mktime(0, 0, 0, date('m'), 1, date('Y'));            $data_inicio = date('Y-m-d', $inicio_mes);            $data_fim = date('Y-m-d');            $sql->where("DATE(a.data_envio) BETWEEN '$data_inicio' AND '$data_fim'");        }        $sql->order('a.id DESC');        if ($result = $this->fetchAll($sql)) {            return $result->toArray();        } else {            return false;        }    }    public function GetMedia($veiculo, $data_inicio = false, $data_fim = false) {        $sql = $this->select()                ->setIntegrityCheck(false)                ->from(array('a' => $this->_name), array("veiculo", "motorista", "litros", "km"))                ->where("a.veiculo = ?", $veiculo)                ->where("a.excluido IS NULL");        if ($data_inicio && $data_fim) {            $sql->where("DATE(a.data_envio) BETWEEN '$data_inicio' AND '$data_fim'");        } else {            $inicio_mes = mktime(0, 0, 0, date('m'), 1, date('Y'));            $data_inicio = date('Y-m-d', $inicio_mes);            $data_fim = date('Y-m-d');            $sql->where("DATE(a.data_envio) BETWEEN '$data_inicio' AND '$data_fim'");        }        if ($result = $this->fetchAll($sql)) {            $abastecimentos = $result->toArray();            $dados = array();            $ultimo_indice = count($abastecimentos);            foreach ($abastecimentos as $indice => $consumo) {                $dados['total_litros'] += $consumo['litros'];                if ($indice == 0) {                    $km = $this->view->LimpaNumero($consumo['km']);                    $result_km = $this->GetPneultimaAbastecida($km, $consumo['veiculo']);                    $dados['km_inicial'] = $this->view->LimpaNumero($result_km['km']);                }                if ($indice == ($ultimo_indice - 1)) {                    $dados['km_final'] = $consumo['km'];                }                if (isset($dados['km_inicial']) && isset($dados['km_final'])) {                    $dados['km_rodados'] = ($dados['km_final'] - $dados['km_inicial']);                }                if (isset($dados['km_rodados']) && isset($dados['total_litros'])) {                    $dados['media_consumo'] = ($dados['km_rodados'] / $dados['total_litros']);                }            }            return $dados;        } else {            return false;        }    }    public function VerificaPendencia($veiculo) {        $sql = $this->select()                ->setIntegrityCheck(false)                ->from(array('c' => $this->_name), array("id"))                ->where("c.veiculo = ?", $veiculo)                ->where("c.km_final IS NULL");        if ($result = $this->fetchRow($sql)) {            return $result->id;        } else {            return false;        }    }    public function ListaAbastecimentos($fornecedor = false, $veiculo = false, $motorista = false, $mes = false, $ano = false) {        $sql = $this->select()                ->setIntegrityCheck(false)                ->from(array('a' => $this->_name), array("*"))                ->joinLeft(array("c" => "caminhoes"), "c.id = a.veiculo", array("modelo_veiculo" => "c.modelo", "c.placa"))                ->joinLeft(array("m" => "motoristas"), "m.id = a.motorista", array("nome_motorista" => "m.nome"))                ->joinLeft(array("f" => "fornecedores_combustivel"), "f.id = a.fornecedor", array("nome_fornecedor" => "f.nome"))                //->where("a.ativo = ?", 1)                ->group("a.id");        if ($fornecedor) {            $sql->where("a.fornecedor = ?", $fornecedor);        }        if ($veiculo) {            $sql->where("a.veiculo = ?", $veiculo);        }        if ($motorista) {            $sql->where("a.motorista = ?", $motorista);        }        if (is_numeric($mes)) {            $sql->where("MONTH(a.data_envio)= ?", $mes);        } elseif (is_null($mes)) {            $sql->where("MONTH(a.data_envio)= MONTH(now())");        } else {        }        if ($ano) {            $sql->where("YEAR(a.data_envio)= ?", $ano);        } else {            $sql->where("YEAR(a.data_envio)= YEAR(now())");        }        $sql->order("a.id");        if ($list = $this->fetchAll($sql)) {            return $list->toArray();        } else {            return FALSE;        }    }    public function VisualizaAbastecida($param) {        $sql = $this->select()                ->setIntegrityCheck(false)                ->from(array('a' => $this->_name), array("*"))                ->joinLeft(array("c" => "caminhoes"), "c.id = a.veiculo", array("modelo_veiculo" => "c.modelo", "c.placa"))                ->joinLeft(array("m" => "motoristas"), "m.id = a.motorista", array("nome_motorista" => "m.nome"))                ->joinLeft(array("f" => "fornecedores_combustivel"), "f.id = a.fornecedor", array("nome_fornecedor" => "f.nome"))                ->where("a.id = ?", $param);        if ($dados = $this->fetchRow($sql)) {            return $dados->toArray();        } else {            return FALSE;        }    }    public function GetPneultimaAbastecida($km, $veiculo, $motorista = FALSE) {        $sql = $this->select()                ->setIntegrityCheck(false)                ->from(array('a' => $this->_name), array("id", "litros", "km"))                ->where("a.km < ?", $km)                ->where("a.veiculo = ?", $veiculo);        if ($motorista) {            $sql->where("a.motorista = ?", $motorista);        }        $sql->order("a.km DESC")                ->limit(1);        if ($dados = $this->fetchRow($sql)) {            return $dados->toArray();        } else {            return FALSE;        }    }    public function GetAbastecidaMotorista($motorista, $limit = false) {        $sql = $this->select()                ->where("motorista = ?", $motorista);        if ($limit) {            $sql->limit($limit);        }        $sql->order("id DESC");        if ($data = $this->fetchAll($sql)) {            return $data->toArray();        }    }    public function update(array $data, $where) {        $info = $this->info();        $data_insert = array_intersect_key($data, $info['metadata']);        parent::update($data_insert, $where);    }}